// Copyright 2021 Parallel Finance Developer.
// This file is part of Parallel Finance.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_loans
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kerria-dev"), DB CACHE: 1024

// Executed Command:
// target/release/parallel
// benchmark
// --chain=kerria-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet-loans
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/loans/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::all)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_loans.
pub trait WeightInfo {fn migrate_reward_data() -> Weight;	fn add_market() -> Weight;	fn activate_market() -> Weight;	fn update_rate_model() -> Weight;	fn update_market() -> Weight;	fn force_update_market() -> Weight;	fn add_reward() -> Weight;	fn withdraw_missing_reward() -> Weight;	fn update_market_reward_speed() -> Weight;	fn claim_reward() -> Weight;	fn claim_reward_for_market() -> Weight;	fn mint() -> Weight;	fn borrow() -> Weight;	fn redeem() -> Weight;	fn redeem_all() -> Weight;	fn repay_borrow() -> Weight;	fn repay_borrow_all() -> Weight;	fn collateral_asset() -> Weight;	fn liquidate_borrow() -> Weight;	fn add_reserves() -> Weight;	fn reduce_reserves() -> Weight;	fn accrue_interest() -> Weight;}

/// Weights for pallet_loans using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	fn migrate_reward_data() -> Weight {
		(37_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(3 as Weight))			.saturating_add(T::DbWeight::get().writes(4 as Weight))	}	fn add_market() -> Weight {
		(37_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(3 as Weight))			.saturating_add(T::DbWeight::get().writes(4 as Weight))	}	fn activate_market() -> Weight {
		(25_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn update_rate_model() -> Weight {
		(25_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn update_market() -> Weight {
		(26_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn force_update_market() -> Weight {
		(34_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(2 as Weight))			.saturating_add(T::DbWeight::get().writes(2 as Weight))	}	fn add_reward() -> Weight {
		(60_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn withdraw_missing_reward() -> Weight {
		(46_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn update_market_reward_speed() -> Weight {
		(48_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(5 as Weight))			.saturating_add(T::DbWeight::get().writes(3 as Weight))	}	fn claim_reward() -> Weight {
		(146_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(6 as Weight))	}	fn claim_reward_for_market() -> Weight {
		(135_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(11 as Weight))			.saturating_add(T::DbWeight::get().writes(6 as Weight))	}	fn mint() -> Weight {
		(153_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(14 as Weight))			.saturating_add(T::DbWeight::get().writes(10 as Weight))	}	fn borrow() -> Weight {
		(202_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(17 as Weight))			.saturating_add(T::DbWeight::get().writes(8 as Weight))	}	fn redeem() -> Weight {
		(148_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(9 as Weight))	}	fn redeem_all() -> Weight {
		(161_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(14 as Weight))			.saturating_add(T::DbWeight::get().writes(10 as Weight))	}	fn repay_borrow() -> Weight {
		(139_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(12 as Weight))			.saturating_add(T::DbWeight::get().writes(8 as Weight))	}	fn repay_borrow_all() -> Weight {
		(139_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(12 as Weight))			.saturating_add(T::DbWeight::get().writes(8 as Weight))	}	fn collateral_asset() -> Weight {
		(40_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(3 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn liquidate_borrow() -> Weight {
		(351_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(28 as Weight))			.saturating_add(T::DbWeight::get().writes(14 as Weight))	}	fn add_reserves() -> Weight {
		(93_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(7 as Weight))			.saturating_add(T::DbWeight::get().writes(5 as Weight))	}	fn reduce_reserves() -> Weight {
		(85_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(6 as Weight))			.saturating_add(T::DbWeight::get().writes(4 as Weight))	}	fn accrue_interest() -> Weight {
		(79_000_000 as Weight)			.saturating_add(T::DbWeight::get().reads(8 as Weight))			.saturating_add(T::DbWeight::get().writes(7 as Weight))	}}

// For backwards compatibility and tests
impl WeightInfo for () {	fn migrate_reward_data() -> Weight {
		(37_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(3 as Weight))			.saturating_add(RocksDbWeight::get().writes(4 as Weight))	}	fn add_market() -> Weight {
		(37_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(3 as Weight))			.saturating_add(RocksDbWeight::get().writes(4 as Weight))	}	fn activate_market() -> Weight {
		(25_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn update_rate_model() -> Weight {
		(25_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn update_market() -> Weight {
		(26_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn force_update_market() -> Weight {
		(34_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(2 as Weight))	}	fn add_reward() -> Weight {
		(60_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn withdraw_missing_reward() -> Weight {
		(46_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn update_market_reward_speed() -> Weight {
		(48_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(5 as Weight))			.saturating_add(RocksDbWeight::get().writes(3 as Weight))	}	fn claim_reward() -> Weight {
		(146_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(6 as Weight))	}	fn claim_reward_for_market() -> Weight {
		(135_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(11 as Weight))			.saturating_add(RocksDbWeight::get().writes(6 as Weight))	}	fn mint() -> Weight {
		(153_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(14 as Weight))			.saturating_add(RocksDbWeight::get().writes(10 as Weight))	}	fn borrow() -> Weight {
		(202_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(17 as Weight))			.saturating_add(RocksDbWeight::get().writes(8 as Weight))	}	fn redeem() -> Weight {
		(148_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(9 as Weight))	}	fn redeem_all() -> Weight {
		(161_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(14 as Weight))			.saturating_add(RocksDbWeight::get().writes(10 as Weight))	}	fn repay_borrow() -> Weight {
		(139_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(12 as Weight))			.saturating_add(RocksDbWeight::get().writes(8 as Weight))	}	fn repay_borrow_all() -> Weight {
		(139_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(12 as Weight))			.saturating_add(RocksDbWeight::get().writes(8 as Weight))	}	fn collateral_asset() -> Weight {
		(40_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(3 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn liquidate_borrow() -> Weight {
		(351_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(28 as Weight))			.saturating_add(RocksDbWeight::get().writes(14 as Weight))	}	fn add_reserves() -> Weight {
		(93_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(7 as Weight))			.saturating_add(RocksDbWeight::get().writes(5 as Weight))	}	fn reduce_reserves() -> Weight {
		(85_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(6 as Weight))			.saturating_add(RocksDbWeight::get().writes(4 as Weight))	}	fn accrue_interest() -> Weight {
		(79_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(8 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}}
