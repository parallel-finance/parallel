// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_liquid_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vanilla-dev"), DB CACHE: 128

// Executed Command:
// target/release/parallel
// benchmark
// --chain=vanilla-dev
// --steps=50
// --repeat=20
// --pallet=pallet_liquid_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/liquid-staking/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::all)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_liquid_staking.
pub trait WeightInfo {
    fn stake() -> Weight;
    fn unstake() -> Weight;
    fn bond() -> Weight;
    fn nominate() -> Weight;
    fn bond_extra() -> Weight;
    fn settlement() -> Weight;
    fn unbond() -> Weight;
    fn rebond() -> Weight;
    fn withdraw_unbonded() -> Weight;
    fn update_reserve_factor() -> Weight;
    fn update_market_cap() -> Weight;
	fn notification_received() -> Weight;
	fn claim_for() -> Weight;
}

/// Weights for pallet_liquid_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn stake() -> Weight {
        (198_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(12 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn unstake() -> Weight {
        (141_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(9 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn bond() -> Weight {
        (116_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn nominate() -> Weight {
        (109_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn bond_extra() -> Weight {
        (117_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn settlement() -> Weight {
        (190_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(16 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn unbond() -> Weight {
        (112_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn rebond() -> Weight {
        (112_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn withdraw_unbonded() -> Weight {
        (140_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn update_reserve_factor() -> Weight {
        (24_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn update_market_cap() -> Weight {
        (24_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
	fn notification_received() -> Weight {
		(122_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
    fn claim_for() -> Weight {
        (84_862_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn stake() -> Weight {
        (198_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(12 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn unstake() -> Weight {
        (141_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(9 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn bond() -> Weight {
        (116_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn nominate() -> Weight {
        (109_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn bond_extra() -> Weight {
        (117_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn settlement() -> Weight {
        (190_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(16 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn unbond() -> Weight {
        (112_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn rebond() -> Weight {
        (112_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn withdraw_unbonded() -> Weight {
        (140_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn update_reserve_factor() -> Weight {
        (24_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn update_market_cap() -> Weight {
        (24_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
	fn notification_received() -> Weight {
		(122_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
    fn claim_for() -> Weight {
        (84_862_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(6 as Weight))
    }
}
