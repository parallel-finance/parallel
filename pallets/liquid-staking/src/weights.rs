// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_liquid_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vanilla-dev"), DB CACHE: 1024

// Executed Command:
// target/release/parallel
// benchmark
// --chain=vanilla-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet-liquid-staking
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/liquid-staking/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::all)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_liquid_staking.
pub trait WeightInfo {	fn stake() -> Weight;	fn unstake() -> Weight;	fn bond() -> Weight;	fn nominate() -> Weight;	fn bond_extra() -> Weight;	fn update_staking_ledger() -> Weight;	fn unbond() -> Weight;	fn rebond() -> Weight;	fn withdraw_unbonded() -> Weight;	fn update_reserve_factor() -> Weight;	fn update_market_cap() -> Weight;	fn notification_received() -> Weight;	fn claim_for() -> Weight;	fn force_set_era_start_block() -> Weight;	fn force_set_current_era() -> Weight;	fn on_initialize() -> Weight;	fn on_initialize_with_advance_era() -> Weight;}

/// Weights for pallet_liquid_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	fn stake() -> Weight {
		(190_935_000 as Weight)			.saturating_add(T::DbWeight::get().reads(15 as Weight))			.saturating_add(T::DbWeight::get().writes(10 as Weight))	}	fn unstake() -> Weight {
		(77_902_000 as Weight)			.saturating_add(T::DbWeight::get().reads(7 as Weight))			.saturating_add(T::DbWeight::get().writes(4 as Weight))	}	fn bond() -> Weight {
		(129_833_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(7 as Weight))	}	fn nominate() -> Weight {
		(130_743_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(7 as Weight))	}	fn bond_extra() -> Weight {
		(132_703_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(7 as Weight))	}	fn update_staking_ledger() -> Weight {
		(32_880_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn unbond() -> Weight {
		(129_803_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(7 as Weight))	}	fn rebond() -> Weight {
		(128_803_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(7 as Weight))	}	fn withdraw_unbonded() -> Weight {
		(131_323_000 as Weight)			.saturating_add(T::DbWeight::get().reads(13 as Weight))			.saturating_add(T::DbWeight::get().writes(7 as Weight))	}	fn update_reserve_factor() -> Weight {
		(22_171_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn update_market_cap() -> Weight {
		(21_961_000 as Weight)			.saturating_add(T::DbWeight::get().reads(1 as Weight))			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn notification_received() -> Weight {
		(89_142_000 as Weight)			.saturating_add(T::DbWeight::get().reads(7 as Weight))			.saturating_add(T::DbWeight::get().writes(5 as Weight))	}	fn claim_for() -> Weight {
		(86_172_000 as Weight)			.saturating_add(T::DbWeight::get().reads(6 as Weight))			.saturating_add(T::DbWeight::get().writes(4 as Weight))	}	fn force_set_era_start_block() -> Weight {
		(2_970_000 as Weight)			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn force_set_current_era() -> Weight {
		(2_900_000 as Weight)			.saturating_add(T::DbWeight::get().writes(1 as Weight))	}	fn on_initialize() -> Weight {
		(5_720_000 as Weight)			.saturating_add(T::DbWeight::get().reads(2 as Weight))	}	fn on_initialize_with_advance_era() -> Weight {
		(353_038_000 as Weight)			.saturating_add(T::DbWeight::get().reads(21 as Weight))			.saturating_add(T::DbWeight::get().writes(14 as Weight))	}}

// For backwards compatibility and tests
impl WeightInfo for () {	fn stake() -> Weight {
		(190_935_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(15 as Weight))			.saturating_add(RocksDbWeight::get().writes(10 as Weight))	}	fn unstake() -> Weight {
		(77_902_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(7 as Weight))			.saturating_add(RocksDbWeight::get().writes(4 as Weight))	}	fn bond() -> Weight {
		(129_833_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn nominate() -> Weight {
		(130_743_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn bond_extra() -> Weight {
		(132_703_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn update_staking_ledger() -> Weight {
		(32_880_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn unbond() -> Weight {
		(129_803_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn rebond() -> Weight {
		(128_803_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn withdraw_unbonded() -> Weight {
		(131_323_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(13 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn update_reserve_factor() -> Weight {
		(22_171_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn update_market_cap() -> Weight {
		(21_961_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn notification_received() -> Weight {
		(89_142_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(7 as Weight))			.saturating_add(RocksDbWeight::get().writes(5 as Weight))	}	fn claim_for() -> Weight {
		(86_172_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(6 as Weight))			.saturating_add(RocksDbWeight::get().writes(4 as Weight))	}	fn force_set_era_start_block() -> Weight {
		(2_970_000 as Weight)			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn force_set_current_era() -> Weight {
		(2_900_000 as Weight)			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn on_initialize() -> Weight {
		(5_720_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))	}	fn on_initialize_with_advance_era() -> Weight {
		(353_038_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(21 as Weight))			.saturating_add(RocksDbWeight::get().writes(14 as Weight))	}}
