// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_xcm_helper
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("parallel-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parallel
// benchmark
// --chain=parallel-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet-xcm-helper
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/xcm-helper/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::all)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xcm_helper.
pub trait WeightInfo {
    fn update_xcm_weight_fee() -> Weight;
	fn as_derivative() -> Weight;
	fn batch_all(c: u32, ) -> Weight;
}

/// Weights for pallet_xcm_helper using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn update_xcm_weight_fee() -> Weight {
        (11_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
	fn as_derivative() -> Weight {
		(1_650_000 as Weight)
	}
	fn batch_all(c: u32, ) -> Weight {
		(13_988_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_481_000 as Weight).saturating_mul(c as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn update_xcm_weight_fee() -> Weight {
        (11_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
	fn as_derivative() -> Weight {
		(1_650_000 as Weight)
	}
	fn batch_all(c: u32, ) -> Weight {
		(13_988_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_481_000 as Weight).saturating_mul(c as Weight))
	}
}
